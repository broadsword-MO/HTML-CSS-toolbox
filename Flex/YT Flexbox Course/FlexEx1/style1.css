/* ==================
Basic styling
=================== */

html,
body {
    background: rgb(255, 255, 98);
    box-sizing: border-box;
    margin: 0;

    /* Height: 100%; necessary if you want .container to be bigger than its content */
    height: 100%;
}

ul {
    padding: 0;
    list-style-type: none;
}

li {
    font: 2.4rem tahoma;
    color: whitesmoke;
    text-align: center;
    padding: 1rem;
}

.home {
    background: rgb(113, 113, 255);
}

.search {
    text-align: left;
    border-radius: 0;
    *background: yellow;
    background: rgb(207, 75, 52);
    overflow: hidden;
}

.search-input {
    font: 2.4rem tahoma;
    color: whitesmoke;
    *min-width: 200px;
    border: none;
    padding-bottom: 1px;
    outline: none;
    border-bottom: 1px solid whitesmoke;
    background: rgb(207, 75, 52);
}

.profile {
    background: rgb(230, 149, 0);
}

.logout {
    background: rgb(0, 184, 0);
}

/* ==================
    Flex layout
  =================== */

.container {
    border: 5px solid #ffcc5c;
    margin: 1rem;
    *height: 90%;

    /* By default flex runs as a single row, while grid runs as a single column */
    display: flex;

    /* flex-direction: row or column; 
    *(flex-direction: row; is the default.) */
    *flex-direction: row;

    /* Justify-content controls content along the main axis (horizontal if the flex-direction is still set to row [the default].)
    *(Justify-content: flex-start; is the default.)
    Space-around gives equal amounts on both sides of each item.
    Space-between gives equal space between items only.
    Space-evenly gives equal space outside and between all items. */
    *justify-content: flex-start;

    /* Align-items controls content along the cross axis (vertical if the flex-direction is still set to row [the default].)
    *(align-items: stretch; is the default.) */
    *align-items: flex-start;

    /* *(Flex-wrap: no-wrap; is the default.) */
    *flex-wrap: wrap;
}

/* NOTE  Flex property values stated in straight numerical fashion are Proportional/Relational, a Ratio. */
.home {
    /* flex: flex-grow flex-shrink flex-basis;
    flex: <number>; is equal to flex: <number> 1 0;
    flex-basis is essentially a starting point of size
    *(flex: 0; is the default.) */
    *flex: 1;

    *flex-grow: 1;
    *flex-shrink: 1;
    *flex-basis: 200px;

    *order: 2;
}

.search {
    flex: 1;
    /* ======== Using flex: ; shorthand ======== */
    /* *(flex-grow: (initial is 0) Defaults to 1 when omitted. */
    *flex-grow: 1;

    /* *(flex-shrink: (initial is 1) Defaults to 1 when omitted. */
    *flex-shrink: 1;

    /* *(flex-basis: (initial is auto) Defaults to 0 when omitted. */
    *flex-basis: 200px;

    /* Align-self is used to move a single item along the cross axis independent of any others.
    It takes the same values as align-items does. */
    *align-self: flex-end;
    *order: 1;
}

.logout {
    *flex: 1;

    /* NOTE justify-self: is non-Flexbox specific and needs more study/clarification */
    *justify-self: flex-end;

    *flex-grow: 1;
    *flex-shrink: 1;
    *flex-basis: 200px;

    /* Order: 0 + or -; positive makes it later in the order, negative makes it sooner and 0 leaves it alone */
    /* (order: 0; is the default.) */
    *order: 0;
}

@media screen and (max-width: 600px) {
    .container {
        flex-wrap: wrap;
    }

    li {
        flex: 1 1 40%;
    }

    .search-input {
        width: 100%;
        text-align: center;
    }
}

@media screen and (max-width: 400px) {
    li {
        flex: 1 1 100%;
    }

    .search {
        order: 1;
    }
}
